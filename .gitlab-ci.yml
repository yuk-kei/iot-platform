stages:
  - build
  # - test
  - docker-build
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

cache:
  paths:
    - .cache/pip  # Cache pip downloads to speed up installs

# before_script:
#   - mkdir -p .cache/pip
build_and_test_data_dispatcher:
  stage: build
  image: python:3.10
  script:
    - cd data_dispatcher-service
    - pip install -r requirements.txt
#    - pytest # Assuming you have tests set up

build_and_test_device_service:
  stage: build
  image: python:3.10
  script:
    - cd device-service
    - pip install -r requirements.txt
#    - pytest

build_and_test_kafka_service:
  stage: build
  image: python:3.10
  script:
    - cd kafka-service
    - pip install -r requirements.txt
#    - pytest

docker-build:
  stage: docker-build
  image: docker
  services:
    - docker:dind
  variables:
    # DOCKER_HOST: "unix:///var/run/docker.sock"
    DOCKER_HOST: "tcp://172.17.0.1:2375"
  before_script:
    - docker info
    - apk --update add aws-cli
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL
  script:
    - docker build --pull -t $ECR_REPO_URL/data_dispatcher-service:$APP_VERSION -f data_dispatcher-service/Dockerfile.data data_dispatcher-service
    - docker tag $ECR_REPO_URL/data_dispatcher-service:$APP_VERSION $ECR_REPO_URL/data_dispatcher-service:latest
    - docker push $ECR_REPO_URL/data_dispatcher-service:$APP_VERSION
    - docker push $ECR_REPO_URL/data_dispatcher-service:latest
    - docker build --pull -t $ECR_REPO_URL/device-service:$APP_VERSION -f device-service/Dockerfile.device device-service
    - docker tag $ECR_REPO_URL/device-service:$APP_VERSION $ECR_REPO_URL/device-service:latest
    - docker push $ECR_REPO_URL/device-service:$APP_VERSION
    - docker push $ECR_REPO_URL/device-service:latest
    - docker build --pull -t $ECR_REPO_URL/kafka-service:$APP_VERSION -f kafka-service/Dockerfile.kafka kafka-service
    - docker tag $ECR_REPO_URL/kafka-service:$APP_VERSION $ECR_REPO_URL/kafka-service:latest
    - docker push $ECR_REPO_URL/kafka-service:$APP_VERSION
    - docker push $ECR_REPO_URL/kafka-service:latest


deploy:
  stage: deploy
  image: kroniak/ssh-client
  before_script:
    - echo "Deploying app using Docker Compose..."
  script:
    - chmod 400 $SSH_PRIVATE_KEY
    - >
      ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "
      cd ~/x42_shell_code &&
      ./stop_backend.sh &&
      cd ~/x42_backend/iot-platform &&
      export AWS_ECR_URL=$ECR_REPO_URL &&
      aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d
      "
#  before_script:
#    - echo "deploying app"
#  script:
#    - chmod 400 $SSH_PRIVATE_KEY
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "aws ecr get-login-password --region  $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker pull $ECR_REPO_URL/data_dispatcher-service:latest"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker stop data_dispatcher-service || true && docker rm data_dispatcher-service || true"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker run -p 9010:9010 -d --name device-service $ECR_REPO_URL/device-service:latest"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker pull $ECR_REPO_URL/device-service:latest"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker stop device-service || true && docker rm kafka-service || true"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker run -p 9001:9001 -d --name device-service $ECR_REPO_URL/device-service:latest"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker pull $ECR_REPO_URL/kafka-service:latest"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker stop kafka-service || true && docker rm kafka-service || true"
#    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY fabworks@$PROD_SERVER_IP "docker run -p 9002:9002 -d --name kafka-service $ECR_REPO_URL/kafka-service:latest"

  # only:
  #   - master
