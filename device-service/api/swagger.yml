openapi: 3.0.3
info:
  title: Device Services - OpenAPI 3.0
  description: |-
    This module defines the routes (endpoints), provides documentation, and allows us to test them. Each route is associated with a specific
    HTTP request method (e.g., GET, POST, PUT, DELETE) and performs a specific action when accessed. The route
    functions typically interact with the application's business logic and data access layers to perform the
    required actions and return the appropriate HTTP response.

    Expected Additions:
        More routes are anticipated to be added to this module as the application expands. These may include
        routes for user authentication, transaction logging, etc.
servers:
  - url: /
tags:
  - name: device-service
    description: Everything about your devices
paths:
  /api/devices/test:
    get:
      summary: check if endpoints are accessible
      description: check if the device-related endpoints are accessible and functioning by having it return hello
      operationId: testHello
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '404':
          description: not connected
  /api/devices/register:
    get:
      summary: get all registered devices
      description: get array of all registered devices
      operationId: getDevices
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: cannot connect to endpoint
    post:
      summary: register new device
      description: either register a new device or check if the provided device_id is already in the database.
      operationId: newDevice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '200':
          description: User is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: id not found in database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/devices/delete:
    post:
      summary: delete device
      description: The route will look for the device with the provided device_id and delete it if found.
      operationId: deleteDevice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/DeviceID'
      responses:
        '200':
          description: successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: id not found in database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    /api/devices/delete:
      post:
        summary: delete device
        description: The route will look for the device with the provided device_id and delete it if found.
        operationId: deleteDevice
        requestBody:
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/DeviceID'
        responses:
          '200':
            description: successful deletion
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          '404':
            description: id not found in database
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
  /api/devices/update:
    post:
      summary: update device
      description: For the device with the provided device_id, its attributes will be updated with the provided details.
      operationId: updateDevice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/DeviceID'
      responses:
        '200':
          description: successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: id not found in database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/devices/get_type:
    post:
      summary: Retrieve a list of devices based on their type.
      description: The route will filter and return devices that match the provided type.
      operationId: getType
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Type'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          '404':
            description: cannot connect to endpoint or given type is incorrect
  /api/devices/filter_by:
    post:
      summary: field name and value filtering
      description: Filter devices based on a specific field name and value.
      operationId: filterBy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/FilterBy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          '404':
            description: cannot connect to endpoint or given type is incorrect
components:
  schemas:
    Device:
      type: object
      properties:
        device_id:
          type: string
        name:
          type: string
        type:
          type: string
        category:
          type: string
        location:
          type: string
        status:
          type: string
        ip_address:
          type: string
        port:
          type: int
    DeviceID:
      type: object
      properties:
        device_id:
          type: string
    Type:
      type: object
      properties:
        type:
          type: string
    FilterBy:
      type: object
      properties:
        field_name:
          type: string
        field_value:
          type: string
  requestBodies:
    Device:
      description: device details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
    DeviceID:
      description: device id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeviceID'
    Type:
      description: type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Type'
    FilterBy:
      description: filtering
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FilterBy'

